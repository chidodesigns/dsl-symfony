<?php

namespace App\Tests\Unit\Services;

use App\Services\ExpressionLanguageService;
use Doctrine\ORM\EntityManagerInterface;
use App\Services\QueryDataExecutor;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class QueryDataExecutorTest extends KernelTestCase
{
    /**
     * 
     *@var EntityManagerInterface
     */
    protected $entityManager;

    /** @var ExpressionLanguageService $expressionLanguageService */
    protected $expressionLanguageService;

    protected $queryDataBuilder;

    protected $expression;

    public function setUp(): void
    {
        self::bootKernel();

        $container = self::$container;

        $this->entityManager = $container->get(EntityManagerInterface::class);
        $this->expressionLanguageService = new ExpressionLanguageService();

        $this->queryDataBuilder = new QueryDataExecutor($this->entityManager, $this->expressionLanguageService);

        $this->expression = '1+2';
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->entityManager->close();
        $this->entityManager = null;
    }

    /** @test */
    public function query_data_executor_class_can_be_created_returns_obj()
    {

        $queryDataBuilder = new QueryDataExecutor($this->entityManager, $this->expressionLanguageService);
        $this->assertIsObject($queryDataBuilder);
    }

    /** @test */
    public function query_data_executor_get_security_from_db_fn_returns_entity_security_id()
    {
        $securitySymbol = $this->queryDataBuilder->getSecurityFromDB('ABC');
        $this->assertIsInt($securitySymbol);
        $this->assertEquals(1, $securitySymbol);
    }

    /** @test */
    public function query_data_executor_get_attribute_from_db_fn_returns_entity_attribute_id()
    {
        $attribute = $this->queryDataBuilder->getAttributeFromDB('price');
        $this->assertIsInt($attribute['attr_id']);
        $this->assertEquals(1, $attribute['attr_id']);
        $this->assertIsString($attribute['attr_name']);
    }

    /** @test */
    public function query_data_executor_get_fact_value_from_db_fn_returns_a_fact_value_int()
    {
        $securitySymbol = $this->queryDataBuilder->getSecurityFromDB('ABC');
        $attribute = $this->queryDataBuilder->getAttributeFromDB('price');
        $factValue = $this->queryDataBuilder->getFactValueFromDB($attribute['attr_id'], $securitySymbol);
        $this->assertIsInt($factValue);
        $this->assertEquals(1, $factValue);
    }

    /** @test */
    public function query_data_executor_execute_expression_returns_evaluated_expression()
    {
        $evaluatedExpression = $this->queryDataBuilder->executeExpression($this->expression);
        $this->assertIsString($evaluatedExpression);
        $this->assertEquals(3, $evaluatedExpression);
    }
}
