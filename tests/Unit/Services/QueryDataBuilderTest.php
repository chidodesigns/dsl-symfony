<?php

namespace App\Tests\Unit\Services;

use App\DomainModels\JsonDomainModel;
use App\Exception\CustomBadRequestHttpException;
use App\Services\QueryDataChecker;
use App\Services\QueryDataExecutor;
use App\Services\ExpressionLanguageService;
use App\Services\QueryDataBuilder;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class QueryDataBuilderTest extends KernelTestCase
{
    /** @var EntityManagerInterface $entityManager */
    protected $entityManager;

    /** @var JsonDomainModel $jsonDomainModel */
    protected $jsonDomainModel;

    /** @var QueryDataChecker $queryDataChecker */
    protected $queryDataChecker;

    /** @var QueryDataExecutor */
    protected $queryDataExecutor;

    /** @var ExpressionLanguageService $expressionLanguageService */
    protected $expressionLanguageService;

    /** @var QueryDataBuilder $queryDataBuilder */
    protected $queryDataBuilder;

    protected string $security;
    protected array $expression;

    public function setUp(): void
    {

        $this->security = 'ABC';

        $this->expression = [
            "fn" => "+",
            "a" => [
                "fn" => "-",
                "a" => "price",
                "b" => 20
            ],
            "b" => 'sales'
        ];

        self::bootKernel();

        $container = self::$container;

        $this->entityManager = $container->get(EntityManagerInterface::class);

        $this->jsonDomainModel = new JsonDomainModel($this->security, $this->expression);
        $this->queryDataChecker = new QueryDataChecker($this->expression);
        $this->queryDataExecutor = new QueryDataExecutor($this->entityManager, $this->expressionLanguageService);
        $this->queryDataBuilder = new QueryDataBuilder($this->jsonDomainModel, $this->queryDataChecker, $this->queryDataExecutor);
    }


    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->entityManager->close();
        $this->entityManager = null;
    }

    public function buildNewQueryDataBuilder($fn)
    {
        $expression = [
            "fn" => $fn,
            "a" => [
                "fn" => "-",
                "a" => "price",
                "b" => 20
            ],
            "b" => 'sales'
        ];
        $this->jsonDomainModel = new JsonDomainModel($this->security, $expression);
        $this->queryDataChecker = new QueryDataChecker($expression);
        $this->queryDataExecutor = new QueryDataExecutor($this->entityManager, $this->expressionLanguageService);
        $this->queryDataBuilder = new QueryDataBuilder($this->jsonDomainModel, $this->queryDataChecker, $this->queryDataExecutor);
        return;
    }

    /** @test */
    public function query_data_builder_class_can_be_created()
    {
        $queryDataBuilder = new QueryDataBuilder($this->jsonDomainModel, $this->queryDataChecker, $this->queryDataExecutor);
        $this->assertIsObject($queryDataBuilder);
    }

    /** @test */
    public function query_data_builder_init_query_builder_program_returns_evaluated_expression()
    {
        $evaluatedExpression = $this->queryDataBuilder->initQueryBuilderProgram();
        $this->assertEquals("23", $evaluatedExpression);
        $this->assertIsString($evaluatedExpression);
    }

    /** @test */
    public function query_data_builder_get_evaluated_result_returns_evaluated_expression()
    {
        $evaluatedExpression = $this->queryDataBuilder->getEvaluatedResult();
        $this->assertEquals("23", $evaluatedExpression);
        $this->assertIsString($evaluatedExpression);
    }

    /** @test */
    public function query_data_builder_get_operators_returns_an_array_of_operators()
    {
        $operators = $this->queryDataBuilder->getOperators();
        $this->assertIsArray($operators);
        $this->assertContains('+', $operators);
    }

    /** @test */
    public function query_data_builder_check_operator_fn_returns_a_bool()
    {
        $isOperatorValid = $this->queryDataBuilder->checkOperatorFn();
        $this->assertIsBool($isOperatorValid);
    }

    /** @test */
    public function query_data_builder_check_operator_fn_returns_a_exception_when_operator_does_not_match()
    {
        $this->expectException(CustomBadRequestHttpException::class);
        $this->buildNewQueryDataBuilder("!");
        $isOperatorValid = $this->queryDataBuilder->checkOperatorFn();
    }

    /** @test */
    public function query_data_builder_check_operator_fn_returns_a_string_operator_as_a_bool_is_passed_with_operator()
    {
        $isOperatorValid = $this->queryDataBuilder->checkOperatorFn(true, "+");
        $this->assertIsString($isOperatorValid);
        $this->assertEquals('+', $isOperatorValid);
    }

    /** @test */
    public function query_data_builder_check_operator_fn_returns_a_exception_when_operator_does_not_match_as_a_bool_is_passed_to_it()
    {

        $this->expectException(CustomBadRequestHttpException::class);
        $isOperatorValid = $this->queryDataBuilder->checkOperatorFn(true, "!");
    }

    /** @test */
    public function query_data_builder_check_operator_fn_returns_an_array_operator_when_operator_is_subtract_and_we_pass_a_bool()
    {
        $isOperatorValid = $this->queryDataBuilder->checkOperatorFn(true, "-");
        $this->assertIsArray($isOperatorValid);
        $this->assertEquals('subtract', $isOperatorValid['operator_type']);
        $this->assertEquals('-', $isOperatorValid['operator']);
    }

    /** @test */
    public function query_data_builder_get_data_types_returns_an_array_of_types()
    {
        $typesArray = $this->queryDataBuilder->getDataTypes();
        $this->assertIsArray($typesArray);
        $this->assertEquals('array', $typesArray['a']);
        $this->assertEquals('string', $typesArray['b']);
    }

    /** @test */
    public function query_data_builder_get_data_types_returns_an_array_of_types_when_bool_and_array_passed_into_it()
    {
        $typesArray = $this->queryDataBuilder->getDataTypes(true, [
            "fn" => "-",
            "a" => "price",
            "b" => 20
        ]);
        $this->assertIsArray($typesArray);
        $this->assertEquals('string', $typesArray['a']);
        $this->assertEquals('integer', $typesArray['b']);
    }

        /** @test */
        public function query_data_builder_get_data_types_returns_an_exception_when_bool_is_false_and_array_passed_into_it()
        {
            $this->expectException(CustomBadRequestHttpException::class);
            $typesArray = $this->queryDataBuilder->getDataTypes(false, [
                "fn" => "-",
                "a" => "price",
                "b" => 20
            ]);
        }

        /** @test */
        public function query_data_returns_check_if_fn_is_subtract_an_array_when_operator_fn_is_subtract()
        {
            $operatorFn = $this->queryDataBuilder->checkIfFnIsSubtract("-");
            $this->assertIsArray($operatorFn);
            $this->assertEquals('subtract',$operatorFn['operator_type']);
            $this->assertEquals('-',$operatorFn['operator']);
        }

        //  Stopped At processModelExpressionArgByType - to be tested

}
