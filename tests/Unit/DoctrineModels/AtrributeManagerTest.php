<?php

namespace App\Tests\Unit\DoctrineModels;

use App\DoctrineModels\AttributeManager;
use App\Exception\CustomBadRequestHttpException;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class AttributeManagerTest extends KernelTestCase
{
    /**
     * 
     *@var EntityManagerInterface
     */
    protected $entityManager;

    /**
     * @var AttributeManager $attributeManager 
     */
    protected $attributeManager;

    public function setUp(): void
    {
        self::bootKernel();

        $container = self::$container;

        $this->entityManager = $container->get(EntityManagerInterface::class);

        $this->attributeManager = new AttributeManager;
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->entityManager->close();
        $this->entityManager = null;
    }

    /** @test */
    public function the_find_attribute_name_fn_returns_an_array()
    {
        $attributename = $this->attributeManager->findAttributeName($this->entityManager, 'price');
        $this->assertIsArray($attributename);
    }

    /** @test */
    public function the_find_attribute_name_fn_returns_attrid_attrname()
    {
        $attributename = $this->attributeManager->findAttributeName($this->entityManager, 'price');
        $this->assertArrayHasKey('attr_id', $attributename);
        $this->assertArrayHasKey('attr_name', $attributename);
    }


    /** @test */
    public function the_find_attribute_name_fn_returns_correct_attr_id()
    {
        $attributename = $this->attributeManager->findAttributeName($this->entityManager, 'price');
        $this->assertEquals(1, $attributename['attr_id']);
    }

    /** @test */
    public function the_find_attribute_name_fn_returns_correct_attr_name()
    {
        $attributename = $this->attributeManager->findAttributeName($this->entityManager, 'price');
        $this->assertEquals('price', $attributename['attr_name']);
    }

    /** @test */
    public function the_find_attribute_name_fn_returns_a_customBadRequestHttpException_when_no_attr()
    {
        $this->expectException(CustomBadRequestHttpException::class);
        $attributename = $this->attributeManager->findAttributeName($this->entityManager, 'today');
        $this->assertEmpty($attributename);
    }
}
